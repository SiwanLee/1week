1주차 노트패드


 - 소스코드 작성의 기본 틀

#include <iostream>

using namespace std;

int main(void)
{
return 0;
}
 - 화면에 문자열 출력하는 객체 cout
1.  cout : Console Output의 약자 
2. << 우측의 것을 왼쪽의 객체로 보낸다라는 의미
3. endl : End line이라는 뜻으로, 줄을 바꿔주는 객체

 - 변수 : 데이터를 보관할 수 있는 공간이나 방을 의미하는 개념
1. int : 4byte(32bit)의 용량을 가진 정수 데이터형 -> 그 이상의 데이터 값을 가지는 변수를 생성하기 위해선 long 사용
2. 변수 선언과 동시에 초기화를 하는것이 좋은 습관 (변수 선언과 동시에 변수 속에는 알수없는 메모리 쓰레기 주소값이 들어감)
3. 프로그래밍에서 '='은 대입의 의미로 대입연산자라고 한다.

 - 변수를 사용하는 규칙
1. 변수 이름의 길이는 제한이 없음
2. 변수의 이름은 대소문자를 구별한다.
3. 변수 이름 처음에는 숫자가 오면 안된다(뒤에 오는건 상관 없음)
4. 변수의 이름에 사용 가능한 특수기호 : '_' , '$'
5. 지정된 키워드는 변수 이름으로 사용할 수 없다.(ex. int / long)
6. 도일한 이름의 변수는 사용할 수 없다.

 - 변수의 이름 짓는 법
1. 변수의 용도를 예상할 수 있게 이름을 지을 것
2. 단어와 단어를 합친 변수는 대문자나 '_'를 이용하여 구분할 것(가독성이 좋은 방법)
3. 불필요한 긴 변수 이름은 피할 것
4. 헝가리안 표기법
 - 변수의 이름에 타입 / 관련한 정보를 포함시키는 방법
 - ex) m_iAge=10; => m : 멤버변수 / i : int형 데이터타입
 - 객체지향의 접두어는 다른 타입 접두어 앞에 붙인다.
   (private 멤버를 사용 / 절대 public으로 오픈하지 말 것!)

 - 변수의 정의
1. 변수는 수치ㅏㅄ만 저장되는 것은 아니며 문자열이나 포인터 같은 좀 더 복잡한 값도 저장됨 => 좀더 일반적으로 표현하면 데이터라고 한다.
2. 변수는 저장된 메모리 위치와 함꼐 길이와 형태에 대한 정보를 가지는데 이런 특성을 Type이라고 한다.

 - puts("문자열")
 => 문자열을 출력 가능하고서식을 다루지 않기 때문에 훨씬 더 간편하며 속도도 빠르다는 장점이 있다.
      (ex. print("%s\n",str) = puts(str))
 - gets(변수)
 => scanf는 문자열을 공백에서 끊어 버리기 떄문에 긴 문자열을 입력받을 수 없지만, gets는 개행 코드 이전의 모든 문자를 입력받는다는 점이 다르다.
      (ex. scanf("%s\n",str) = gets(str) )
 - putch(c)
 => printf 함수의 %c 서식을 사용하는 것과 동일하되 훨씬 더 간편하게 사용할 수 있다.
 - getch()
 => getch 함수는 문자 하나만 입력받는다. 누르는 즉시 입력되어 버린다.
 - delay(n)
 => 인수로 주어진 n만큼 시간을 지연시키는데 아무것도 하지 않고 대기한다.
 - exit(0)
 => 프로그램의 치명적인 에러나 사용자의 명시적인 명령에 의해 실행 중간에 강제 종료하고자 할때 이 함수를 호출한다.
 - kbhit()
 => 키보드의 키가 눌러져 있는지 아닌지만을 조사한다.
 - setcursortype(커서형태)
 => 콘솔창에서 주로 문자를 입출력하는데 다음 입출력될 위치는 커서가 가리킨다.

 - 정수형 int
1. 부호에 대한 수식어가 생략되면 Signed가 적용되어 부호가 있는것으로 선언된다.
2. int앞에 수식어가 있을 경우 int는 생략할 수 있다.(signed / unsigned)
3. 오버플로우(overflow) : 변수의 저장 용량을 넘어서는 현상


 - 실수형(소수점 이하를 가지는 수로, 정수보다는 한단계 더 확장된 범위를 포괄한다.)

 - 문자형(문자 하나를 표현하는 자료형)
1. 255개의 서로 다른 문자를 기억하기 위해서는 단지 1바이트만 있으면 된다.
2. C++은 string이라는 ㅡㄹ래스를 제공하여 MFC 라이브러리에도 CString이라는 문자열 클래스가 정의
   (ex. char str[6] = "korea";
 - 배열 : 같은 타입의 변수를 모아 놓은 것(각 격자는 1바이트가 할당)

 - 열거형 : 변수가 가질 수 있느 가능한 값들을 나열해 놓은 타입
  (ex. enum {EAST,WEST,SOUTH,NORTH} mark;  -> 동서남북은 열거 멤버라고 함
       mark=EAST;   // mark에 EAST를 대입
       if(mark == WEST)  // mark가 WEST이면
1. 열거 멤버는 별도의 지정이 없으면 0부터 시작하는 정수값으로 정의된다.(단 정수값이 지정되어있다면 그 정수부터 지정이됨)
   이어지는 멤버는 앞 멤버의 값 +1이 된다.
2. 열거 멤버기리 중복되는 것도 허용되지 않는다. / 열거 멤버의 값은 중복되어도 상관 없음.
3. 열거형 타입을 먼저 정의하고 이 타입으로부터 변수를 선언하는 방법이 많이 사용됨
  (ex. enum origin {EAST,WEST,SOUTH,NORTH};  // origin이라는 태그 이름으로 방향에 대한 열거 타입 정의
       origin mark;

 - 유도형
1. 배열 : 동일한 타입을 가진ㄴ 자료들의 집합
 - 타입 : 배열의 요소가 어떠한 값을 담는지를 지정
 - 배열명 : 배열도 변수이므로 이름이 있어야함
 - 크기 : 요소의 개수가 몇개인지를 정수 상수로 지정한다.
   (ex. int array[5]; // 정수형 변수 5개의 집합인 배열 array를 선언  => 4바이트의 메모리 5개 20바이트 할당
        double rate[10];  // 실수형 변수 10개의 집합인 배열 rate를 선언 => 총 80바이트 할당)

2. 구조체 : 서로 다른 타입의 집합
 - 구조체에 속하는 개별 변수를 멤버라고 한다 / 구조체를 선언할 때는 struct라는 키워드를 사용한다.
   (ex. struct{
              char Name[0];
              int Age;
              double Height;
               } Friend;)   // 이름 10바이트 , 나이 4바이트 키 8바이트 총 22바이트 할당

   Friend.Age=28;
   printf("내 친구 이름은 %S이다",Friend.Name);  // Friend[100]의 형식으로 구조체 배열 작성 가능


3. 포인터 : 변수의 값이 아닌 변수가 저장되어 있는 메모리의 번지를 기억하는 타입
 - 선언방법 : 타입 *변수명;
  * 타입 : 포인터가 가리키는 변수가 어떤 종류인가를 지정하며 int,char,double등의 기본형과 배열 구조체, 사용자 정의형 등의 모든 타입이 가능
  * 이 선언문에 사용된 *는 뒤쪽의 명칭이 포인터 변수임을 지정하는 구두점
임.
   (ex. 정수형 변수의 번지를 기억하는 변수 pi => int *pi;)
 - * : 포인터가 가리키는 번지의 값을 읽는다.
 - & : 변수가 기억되어 있는 메모리 번지를 읽는다.

4. 사용자 정의형 : 가독성을 높이는 효과가 있고 주로 구조체같이 큰 타입에 대해 별도의 타입을 정의하여 사용하는 경우가 많음

5. 논리형 : 참 또는 거짓 둘 중의 하나의 값을 가지는 타입이다.
 - BOOL형을 사용하면 의미를 좀 더 분명히 나타낼 수 있어서 가독성이 높아진다.
 - 변수의 크기는 4바이트이다.
 - bool형은 크기가 1바이트 밖에 되지 않아 BOOL형에 비해 메모리를 더 적게 차지한다는 장점이 있다.